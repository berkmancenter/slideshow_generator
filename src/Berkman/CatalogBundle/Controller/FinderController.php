<?php
namespace Berkman\CatalogBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Cookie;

use Berkman\CatalogBundle\Entity\Finder;
use Berkman\CatalogBundle\Form\Finder\SearchType;
use Berkman\CatalogBundle\Form\Finder\SelectType;
use Berkman\CatalogBundle\Form\Finder\MasterImportType;
use Berkman\CatalogBundle\Form\Finder\CustomImportType;
use Berkman\CatalogBundle\Form\ImportType;

/**
 * Finder controller.
 *
 * Notes:
 *   - Finder objects are now stuck in the session object instead of the database.
 *   - This necessitates certain changes:
 *        + IDs of objects (images, imageGroups) are going to have to be generated by something 
 *          other than the database
 *        + Catalog objects are going to be weird and wacky.  When persisting the images from
 *          the finder object, we'll have to pull the catalog from the database by ID and assign
 *          to the image and imageGroup objects.
 */
class FinderController extends Controller
{
    /**
     * Show the search form.
     *
     */
    public function indexAction()
    {
        $request    = $this->getRequest();
        $em         = $this->getDoctrine()->getEntityManager();
        $slideshows = $em->getRepository('BerkmanSlideshowBundle:Slideshow')->findAll();
        $finder     = $this->get('berkman_catalog.finder');
        $catalogManager = $this->get('berkman_catalog.catalog_manager');
        $finderForm = $this->createForm(new SearchType($catalogManager), $finder);
        $masterImportForm = $this->createForm(new MasterImportType());
        $customImportForm = $this->createForm(new CustomImportType(), null, array('catalogs' => $finder->getCatalogs()));

        if ('POST' === $request->getMethod()) {
            $finderForm->bindRequest($request);

            if ($finderForm->isValid()) {
                $catalogs = $finder->getCatalogs();
                foreach ($catalogs as $catalog) {
                    $catalogIds[] = $catalog->getId();
                }

                return $this->redirect($this->generateUrl('finder_show', array(
                    'catalogIds'   => implode('_', $catalogIds),
                    'keyword' => $finder->getKeyword(),
                    'page'    => 1
                )));
            }
        }
        else {
            return $this->render('BerkmanSlideshowBundle:Finder:index.html.twig', array(
                'slideshows' => $slideshows,
                'masterImportForm' => $masterImportForm->createView(),
                'customImportForm' => $customImportForm->createView(),
                'finderForm'  => $finderForm->createView(),
                'finder' => $finder
            ));
        }
    }

    /**
     * Show the search results.
     *
     * @param string $catalogs  A '_' separated list of catalog IDs
     * @param string $keyword  The keyword for which to search
     * @param int $page  The page of search results to fetch
     *
     * @return Response
     *
     * Note: These next two functions pretty much repeat each other - they shouldn't
     */
    public function showAction($catalogIds, $keyword, $page = 1)
    {
        $em = $this->getDoctrine()->getEntityManager();
        $catalogManager = $this->get('berkman_catalog.catalog_manager');
        $catalogs = array();
        foreach (explode('_', $catalogIds) as $catalogId) {
            $catalogs[] = $catalogManager->getCatalog($catalogId);
        }

        $finder = $this->getFinder();
        $finder->setHistoryStack(array($this->getRequest()->getUri()));
        $finder->setCatalogs($catalogs);
        $output = $finder->findResults($keyword, $page);

        $this->setFinder($finder);

        return $this->render('BerkmanSlideshowBundle:Finder:show.html.twig', array(
            'finder'      => $finder,
            'images'      => $finder->getCurrentImageResults(),
            'imageGroups' => $finder->getCurrentImageGroupResults(),
        ));
    }

    /**
     * Show the results of a imageGroup search
     * 
     * @param string $imageGroupId  The id of the imageGroup to show
     * @param int $page  The page to fetch
     *
     * @return Response
     *
     */
    public function showImageGroupAction($imageGroupId, $page = 1)
    {
        $finder = $this->getFinder();
        if ($page == 1) {
            $finder->pushHistoryStack($this->getRequest()->getUri());
        }

        $imageGroup = $finder->getImageGroup($imageGroupId);
        if (!$imageGroup) {
            throw $this->createNotFoundException('Unable to find imagegroup.');
        }

        $output = $finder->findImageGroupResults($imageGroup, $page);
        $this->setFinder($finder);

        return $this->render('BerkmanSlideshowBundle:Finder:show.html.twig', array(
            'finder'      => $finder,
            'images'      => $finder->getCurrentImageResults(),
            'imageGroups' => $finder->getCurrentImageGroupResults(),
            'imageGroupId'=> $imageGroupId
        ));
    }

    /**
     * Handle the submission of the search results form
     * 
     * There are a few ways in which the form can be submitted:
     *   - Previous page button
     *   - Next page button
     *   - View ImageGroup button
     *   - Finish button
     * The selected images and imageGroup should be saved no matter the method
     *
     */
    public function submitAction()
    {
        $request   = $this->getRequest();
        $em        = $this->getDoctrine()->getEntityManager();
        $finder    = $this->getFinder();
        $response  = $this->redirect($this->generateUrl('slideshow_add_images'));

        $images = $request->get('images');
        if (!empty($images)) {
            foreach ($images as $image_id) {
                $finder->addSelectedImageResult($image_id); 
            }
        }

        $imageGroups = $request->get('imageGroups');
        if (!empty($imageGroups)) {
            foreach ($imageGroups as $imageGroup_id) {
                $images = $finder->getImageGroup($imageGroup_id)->getAllImages();
                foreach ($images as $image) {
                    $finder->addSelectedImageResult($finder->addImage($image));
                }
            }
        }

        if ($request->isXmlHttpRequest()) {
            return $this->render('BerkmanSlideshowBundle:Finder:addImages.json.twig', array(
                'finderImages' => count($finder->getSelectedImageResults())
            ));
        }

        $catalogIds = array();
        $catalogs = $finder->getCatalogs();
        foreach ($catalogs as $catalog) {
            $catalogIds[] = $catalog->getId();
        }

        if (in_array($request->get('action'), array('Next Page >', '< Previous Page'))) {
            $page = ($request->get('action') == 'Next Page >') ?
                $finder->getCurrentPage() + 1 : $finder->getCurrentPage() - 1;
            //This would mean we're browsing an image group
            if ($request->get('imageGroupId') != null) {
                $response = $this->redirect($this->generateUrl('finder_imageGroup', array(
                    'imageGroupId' => $request->get('imageGroupId'),
                    'page' => $page
                )));
            }
            else {
                $response = $this->redirect($this->generateUrl('finder_show', array(
                    'catalogIds' => implode('_', $catalogIds),
                    'keyword' => $finder->getKeyword(),
                    'page' => $page
                )));
            }
        }
        elseif ($request->get('action') == 'Back') {
            $finder->popHistoryStack();
            $uri = $finder->popHistoryStack();
            $response = $this->redirect($uri);
        }
        elseif ($request->get('action') != 'Finish') {
            $response = $this->redirect($this->generateUrl('finder_imageGroup', array(
                'imageGroupId' => $request->get('action')
            )));
        }

        $this->setFinder($finder);

        return $response;
    }

    public function customImportAction()
    {
        $request = $this->getRequest();
        $finder = $this->getFinder();
        $customImportForm = $this->createForm(new CustomImportType(), null, array('catalogs' => $finder->getCatalogs()));
        if ('POST' === $request->getMethod()) {
            $customImportForm->bindRequest($request);
            if ($customImportForm->isValid()) {
                $data = $customImportForm->getData();
                foreach ($data as $catalogId => $file) {
                    $file = $file->openFile();
                    $finder->customImport($catalogId, $file);
                }
                $this->setFinder($finder);

                return $this->redirect($this->generateUrl('slideshow_add_images'));
            }
        }
    }

    public function masterImportAction()
    {
        $request = $this->getRequest();
        $finder = $this->getFinder();
        $masterForm = $this->createForm(new MasterImportType());
        if ('POST' == $request->getMethod()) {
            $masterForm->bindRequest($request);
            if ($masterForm->isValid()) {
                $file = $masterForm['file']->getData();
                $file = $file->openFile();
                $failed = $finder->masterImport($file);
                if (!empty($failed)) {
                    $request->getSession()->setFlash('error', count($failed) . ' failed to import');
                }
                $this->setFinder($finder);
                return $this->redirect($this->generateUrl('slideshow_add_images'));
            }
        }

        return null;
    }

    /**
     * Get the Finder object for the current session
     * or make a new one.
     *
     * @return Berkman\SlideshowBundle\Entity\Finder
     */
    private function getFinder()
    {
        $finder = $this->getRequest()->getSession()->get('finder');
        if (!$finder) {
            $finder = $this->get('berkman_catalog.finder');
            $this->setFinder($finder);
        }

        return $finder;
    }

    /**
     * Assign some Finder object to the current session
     *
     * @param Berkman\SlideshowBundle\Entity\Finder $finder
     */
    private function setFinder(Finder $finder)
    {
        $this->getRequest()->getSession()->set('finder', $finder);
    }
}
