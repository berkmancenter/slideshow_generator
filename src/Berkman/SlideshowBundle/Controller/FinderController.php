<?php

namespace Berkman\SlideshowBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Cookie;
use Berkman\SlideshowBundle\Entity;
use Berkman\SlideshowBundle\Form\FinderType;
use Berkman\SlideshowBundle\Form\FinderResultsType;

/**
 * Finder controller.
 *
 * Notes:
 *   - Finder objects are now stuck in the session object instead of the database.
 *   - This necessitates certain changes:
 *        + IDs of objects (images, collections) are going to have to be generated by something 
 *          other than the database
 *        + Repo objects are going to be weird and wacky.  When persisting the images from
 *          the finder object, we'll have to pull the repo from the database by ID and assign
 *          to the image and collection objects.
 */
class FinderController extends Controller
{
    /**
     * Show the search form.
     *
     */
    public function indexAction()
    {
        $request = $this->getRequest();
		$finder = new Entity\Finder;
        $finderForm = $this->createForm(new FinderType(), $finder);

        if ('POST' === $request->getMethod()) {
            $finderForm->bindRequest($request);

            if ($finderForm->isValid()) {
				$repoIds = array();
				$repos = $finder->getRepos();
				foreach ($repos as $repo) {
					$repoIds[] = $repo->getId();
				}

				return $this->redirect($this->generateUrl('finder_show', array(
					'repos' => implode('_', $repoIds),
					'keyword' => $finder->getKeyword(),
					'page' => 1
				)));
            }
        }
		else {
			return $this->render('BerkmanSlideshowBundle:Finder:index.html.twig', array(
				'finderForm'   => $finderForm->createView()
			));
		}

    }

    /**
     * Show the search results.
     *
     * @param string $repos  A '_' separated list of repo IDs
     * @param string $keyword  The keyword for which to search
     * @param int $page  The page of search results to fetch
     *
     * @return Response
     *
     * Note: These next two functions pretty much repeat each other - they shouldn't
     */
    public function showAction($repos, $keyword, $page = 1)
    {
		$em = $this->getDoctrine()->getEntityManager();
		$repos = $em->getRepository('BerkmanSlideshowBundle:Repo')->findBy(array(
			'id' => explode('_', $repos)
		));
		if (!$repos) {
			throw $this->createNotFoundException('Unable to find Repos.');
		}

        $finder = $this->getFinder();
        $finder->setRepos($repos);
		$output = $finder->findResults($keyword, $page);

        $this->setFinder($finder);

		return $this->render('BerkmanSlideshowBundle:Finder:show.html.twig', array(
            'finder' => $finder,
            'images' => $finder->getCurrentImageResults(),
            'collections' => $finder->getCurrentCollectionResults()
        ));
    }

    /**
     * Show the results of a collection search
     * 
     * @param string $collectionId  The id of the collection to show
     * @param int $page  The page to fetch
     *
     * @return Response
     *
     */
    public function showCollectionAction($collectionId, $page = 1)
    {
		$em = $this->getDoctrine()->getEntityManager();
        $finder = $this->getFinder();

		$collection = $finder->getCurrentCollectionResult($collectionId);
		if (!$collection) {
			throw $this->createNotFoundException('Unable to find Collection.');
		}

		$output = $finder->findCollectionResults($collection, $page);
        $this->setFinder($finder);

		return $this->render('BerkmanSlideshowBundle:Finder:show.html.twig', array(
            'finder' => $finder,
            'images' => $finder->getCurrentImageResults(),
            'collections' => $finder->getCurrentCollectionResults(),
        ));
    }

    /**
     * Handle the submission of the search results form
     * 
     * There are a few ways in which the form can be submitted:
     *   - Previous page button
     *   - Next page button
     *   - View Collection button
     *   - Finish button
     * The selected images and collection should be saved no matter the method
     *
     */
	public function submitAction()
	{
		$request = $this->getRequest();
        $em = $this->getDoctrine()->getEntityManager();
        $finder = $this->getFinder();
		$response  = $this->redirect($this->generateUrl('slideshow_add_images'));

		$images = $request->get('images');
		if (!empty($images)) {
            foreach ($images as $image_id) {
                $finder->addSelectedImageResults($finder->getCurrentImageResult($image_id)); 
            }
		}

		$collections = $request->get('collections');
		if (!empty($collections)) {
            foreach ($collections as $collection_id) {
                $images = $finder->getCurrentCollectionResult($collection_id)->getAllImages();
                foreach ($images as $image) {
                    $finder->addSelectedImageResults($image);
                }
            }
		}

        $this->setFinder($finder);

        $repoIds = array();
        $repos = $finder->getRepos();
        foreach ($repos as $repo) {
            $repoIds[] = $repo->getId();
        }

		if (in_array($request->get('action'), array('Next Page', 'Previous Page'))) {
            $page = ($request->get('action') == 'Next Page') ?
                $finder->getCurrentPage() + 1 : $finder->getCurrentPage() - 1;
			$response = $this->redirect($this->generateUrl('finder_show', array(
				'repos' => implode('_', $repoIds),
				'keyword' => $finder->getKeyword(),
				'page' => $page
			)));
		}
        elseif ($request->get('action') != 'Finish') {
            $response = $this->redirect($this->generateUrl('finder_collection', array(
                'collectionId' => $request->get('action')
            )));
        }

		return $response;
	}

    /**
     * Get the Finder object for the current session
     * or make a new one.
     *
     * @return Berkman\SlideshowBundle\Entity\Finder
     */
    private function getFinder()
    {
        $finder = $this->getRequest()->getSession()->get('finder');
        if (!$finder) {
            $finder = new Entity\Finder();
            $this->setFinder($finder);
        }

        return $finder;
    }

    /**
     * Assign some Finder object to the current session
     *
     * @param Berkman\SlideshowBundle\Entity\Finder $finder
     */
    private function setFinder(Entity\Finder $finder)
    {
        $this->getRequest()->getSession()->set('finder', $finder);
    }
}
